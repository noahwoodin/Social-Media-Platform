version: "3.8"

services:
  mongodb:
    command: mongod --quiet --logpath /dev/null
    container_name: db-noah
    build:
      context: .
      dockerfile: db/Dockerfile
    ports:
      - "27017:27017"
    logging:
      driver: none

  redis:
    container_name: redis-noah
    build:
      context: .
      dockerfile: cache/Dockerfile
    ports:
      - "6379:6379"

  flask_app1:
    build:
      context: .
      dockerfile: Dockerfile-flask
    container_name: flask_app1
    expose:
      - 5000

  flask_app2:
    build:
      context: .
      dockerfile: Dockerfile-flask
    container_name: flask_app2
    expose:
      - 5000

  rabbitmq:
    container_name: rabbitmq
    build:
      context: .
      dockerfile: rabbitmq/Dockerfile
    ports:
      - "5672:5672"      # RabbitMQ
      - "15672:15672"    # RabbitMQ management interface
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 10s
      retries: 5

  nginx:
    image: nginx:latest
    container_name: nginx_load_balancer
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"

  demo:
    build:
      context: .
      dockerfile: Dockerfile-demo
    container_name: demo
    depends_on:
      - redis
      - mongodb
      - flask_app1
      - flask_app2
      - nginx

  user1:
    build:
      context: .
      dockerfile: user-servers/Dockerfile-user1
    container_name: user1
    expose:
      - 5001
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      mongodb:
        condition: service_started
      flask_app1:
        condition: service_started
      flask_app2:
        condition: service_started
      nginx:
        condition: service_started

  user2:
    build:
      context: .
      dockerfile: user-servers/Dockerfile-user2
    container_name: user2
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      mongodb:
        condition: service_started
      flask_app1:
        condition: service_started
      flask_app2:
        condition: service_started
      nginx:
        condition: service_started
